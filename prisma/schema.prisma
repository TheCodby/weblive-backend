generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum LoginMethod {
  Normal
  Social
}

model User{
  id Int @id @default(autoincrement())
  username String @unique 
  email String @unique
  admin Boolean @default(false)
  bio String?
  avatar String @default("https://weblive-1.s3.us-east-1.amazonaws.com/default.jpg")
  last_login DateTime?
  googleId String? @unique
  discordId String? @unique
  created_at DateTime @default(now())
  following Follow[] @relation("follower")
  follower Follow[] @relation("following")
  verified Boolean @default(false)
  banned Boolean @default(false)
  loginMethod LoginMethod @default(Normal)

  credentials Credential?
  verificationCode verificationCode?
  rooms Room[]
  joinedRooms UserRoom[]

  @@unique([id, username])
}
model Credential{
  user User @relation(fields: [userId, username], references: [id, username])
  userId Int @id
  username String
  password String
  created_at DateTime @default(now())

  @@unique([userId, username])
}
model verificationCode{
  id Int @id @default(autoincrement())
  code String @unique
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
}
model Room{
  id Int @id @default(autoincrement())
  name String @unique
  password String?
  type Int @default(0) // 0: public, 1: private
  description String?
  ownerId Int
  capacity Int @default(10)
  owner User @relation(fields: [ownerId], references: [id])
  status Int @default(1) // 0: inactive, 1: active
  created_at DateTime @default(now())
  users UserRoom[]
}
model UserRoom{
  id Int @id @default(autoincrement())
  userId Int
  roomId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
}
model Follow{
  id Int @id @default(autoincrement())
  followerId Int
  followingId Int
  follower User @relation(name: "follower", fields: [followerId], references: [id]) 
  following User @relation(name: "following", fields: [followingId], references: [id])
  created_at DateTime @default(now())

  @@unique([followerId, followingId])
}